openapi: 3.1.0
info:
  title: Zenenti API
  description: Backend REST API for Zenenti Application.
  version: 1.0.0

servers:
  - url: https://api.zenenti.es/v1

security:
  - zen-auth: []

paths:
  /public/user/register-begin:
    post:
      tags:
        - authentication
      summary: Begin registration.
      description: Create a temporary new user with just the user's name (from REGISTRO), which will allow them to complete the registration with email and password after completing tutorial.
      security: [ ] # No auth required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the user to create.
                  type: String
  /public/user/login:
    post:
      tags:
        - authentication
      description: Login user.
      security: [ ] # No auth required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: String
                password:
                  type: String
  /private/register-end:
    post:
      tags:
        - authentication
      summary: End registration.
      description: Finalize registration by providing an email and password to associate with the new account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: String
                password:
                  type: String
  /private/user:
    get:
      tags:
        - authentication
      description: Information about currently logged-in user.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /private/category/all:
    get:
      tags:
        - category
      description: Get all categories.
      responses:
        '200':
          description: Category List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /private/category/{id}:
    get:
      tags:
        - category
      description: Get category by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID.
          schema:
            type: Number
      responses:
        '200':
          description: Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /private/practice-type/all:
    get:
      tags:
        - practice-type
      description: Get all practice types.
      responses:
        '200':
          description: Practice Type List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PracticeType'
  /private/practice-type/{id}:
    get:
      tags:
        - practice-type
      description: Get practice type by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Practice Type ID.
          schema:
            type: Number
      responses:
        '200':
          description: Practice Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PracticeType'
  /private/practice/all:
    get:
      tags:
        - practice
      description: Get all practices.
      parameters:
        - name: categoryId
          in: query
          required: false
          description: Category ID to sort by.
          schema:
            type: Number
        - name: practiceTypeId
          in: query
          required: false
          description: Practice Type ID to sort by.
          schema:
            type: Number
        - name: order
          in: query
          required: false
          description: Duration sort order.
          schema:
            type: String
            enum: [ascending, descending]
        - name: limit
          in: query
          required: false
          description: Limit of practices to return.
          schema:
            type: Number
      responses:
        '200':
          description: Practice List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Practice'
  /private/practice/{id}:
    get:
      tags:
        - practice
      description: Get practice by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Practice ID.
          schema:
            type: Number
      responses:
        '200':
          description: Practice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Practice'

components:
  securitySchemes:
    zen-auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: Number
        name:
          type: String
          description: User's first name.
        email:
          type: String
    Category:
      type: object
      properties:
        id:
          type: Number
        title:
          type: String
        iconPrimaryUrl:
          type: String
        iconSecondaryUrl:
          type: String
        backgroundUrl:
          type: String
    PracticeType:
      type: object
      properties:
        id:
          type: Number
        title:
          type: String
    Practice:
      type: object
      properties:
        id:
          type: Number
        categoryId:
          type: Number
        practiceTypeId:
          type: Number
        durationMillis:
          type: Number
        audioUrl:
          type: String
